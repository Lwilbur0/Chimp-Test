{"ast":null,"code":"var _jsxFileName = \"/Users/lwilbs/Desktop/chimptest/src/App.js\";\nimport ChimpTest from \"./ChimpTest\";\nimport './ChimpTest.css';\nimport './App.css';\nimport { render } from \"@testing-library/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  let counter = 1;\n  function createButtons() {\n    var myButtons = [];\n    for (let i = 0; i < counter; i++) {\n      var button = /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createButtons,\n        children: \"i;\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 20\n      }, this);\n      const randomLeftValue = Number.parseInt(Math.random() * (1000 - 10) + 10);\n      const randomTopValue = Number.parseInt(Math.random() * (1000 - 10) + 10);\n      button.style.top = `${randomLeftValue}px`;\n      button.style.left = `${randomTopValue}px`;\n      myButtons.push(button);\n      counter++;\n    }\n    console.log(\"yo\");\n    render();\n    {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: myButtons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this);\n    }\n    // const button = document.querySelector(\"button\");\n    // const randomLeftValue = Number.parseInt(Math.random() * (1000 - 10) + 10);\n    // const randomTopValue =  Number.parseInt(Math.random() * (1000 - 10) + 10);\n    // button.style.top = `${randomLeftValue}px`;\n    // button.style.left = `${randomTopValue}px`;\n  }\n\n  function newButton(data) {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => createButtons(data.label),\n      children: \" //pass parameter for callback here if binding isn't used data.name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ChimpTest, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: createButtons,\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["ChimpTest","render","App","counter","createButtons","myButtons","i","button","randomLeftValue","Number","parseInt","Math","random","randomTopValue","style","top","left","push","console","log","newButton","data","label"],"sources":["/Users/lwilbs/Desktop/chimptest/src/App.js"],"sourcesContent":["import ChimpTest from \"./ChimpTest\";\nimport './ChimpTest.css'\nimport './App.css';\nimport { render } from \"@testing-library/react\";\n\nfunction App() {\n  let counter = 1;\n  function createButtons() {\n    var myButtons = [];\n    for (let i = 0; i < counter; i++) {\n      var button = <button\n                    onClick= {createButtons}>\n                    i;\n                   </button>\n      const randomLeftValue = Number.parseInt(Math.random() * (1000 - 10) + 10);\n      const randomTopValue =  Number.parseInt(Math.random() * (1000 - 10) + 10);\n      button.style.top = `${randomLeftValue}px`;\n      button.style.left = `${randomTopValue}px`;\n      myButtons.push(button)\n      counter++;\n    }\n    console.log(\"yo\")\n\n    render(); {\n      return (\n        <div>{myButtons }</div>\n      );\n    }\n    // const button = document.querySelector(\"button\");\n    // const randomLeftValue = Number.parseInt(Math.random() * (1000 - 10) + 10);\n    // const randomTopValue =  Number.parseInt(Math.random() * (1000 - 10) + 10);\n    // button.style.top = `${randomLeftValue}px`;\n    // button.style.left = `${randomTopValue}px`;\n  }\n  function newButton(data) {\n    return (\n      <button \n          onClick={() => createButtons(data.label)}> //pass parameter for callback here if binding isn't used\n          data.name\n      </button>\n  );\n  }\n  return (\n    <>\n    <ChimpTest />\n    {/* <div>{myButtons }</div> */}\n    <button onClick= {createButtons}>Start</button>\n    </>\n  )\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,SAAS,MAAM,aAAa;AACnC,OAAO,iBAAiB;AACxB,OAAO,WAAW;AAClB,SAASC,MAAM,QAAQ,wBAAwB;AAAC;AAAA;AAEhD,SAASC,GAAG,GAAG;EACb,IAAIC,OAAO,GAAG,CAAC;EACf,SAASC,aAAa,GAAG;IACvB,IAAIC,SAAS,GAAG,EAAE;IAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,OAAO,EAAEG,CAAC,EAAE,EAAE;MAChC,IAAIC,MAAM,gBAAG;QACC,OAAO,EAAGH,aAAc;QAAA,UAAC;MAE1B;QAAA;QAAA;QAAA;MAAA,QAAS;MACtB,MAAMI,eAAe,GAAGC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,MAAM,EAAE,IAAI,IAAI,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;MACzE,MAAMC,cAAc,GAAIJ,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,MAAM,EAAE,IAAI,IAAI,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;MACzEL,MAAM,CAACO,KAAK,CAACC,GAAG,GAAI,GAAEP,eAAgB,IAAG;MACzCD,MAAM,CAACO,KAAK,CAACE,IAAI,GAAI,GAAEH,cAAe,IAAG;MACzCR,SAAS,CAACY,IAAI,CAACV,MAAM,CAAC;MACtBJ,OAAO,EAAE;IACX;IACAe,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC;IAEjBlB,MAAM,EAAE;IAAE;MACR,oBACE;QAAA,UAAMI;MAAS;QAAA;QAAA;QAAA;MAAA,QAAQ;IAE3B;IACA;IACA;IACA;IACA;IACA;EACF;;EACA,SAASe,SAAS,CAACC,IAAI,EAAE;IACvB,oBACE;MACI,OAAO,EAAE,MAAMjB,aAAa,CAACiB,IAAI,CAACC,KAAK,CAAE;MAAA,UAAC;IAE9C;MAAA;MAAA;MAAA;IAAA,QAAS;EAEb;EACA,oBACE;IAAA,wBACA,QAAC,SAAS;MAAA;MAAA;MAAA;IAAA,QAAG,eAEb;MAAQ,OAAO,EAAGlB,aAAc;MAAA,UAAC;IAAK;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA,gBAC5C;AAEP;AAAC,KA5CQF,GAAG;AA8CZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}